package main

import (
	"github.com/stretchr/testify/assert" // boolean assertions for pass and fail
	"testing"                            // testing library
)

func TestMove(t *testing.T) {
	positions := []Position{
		{0, 0},
		{0, 0},
		{0, 0},
		{-3, -3},
		{-4, -6},
		{-12, -6},
	}
	moves := []string{
		"U 1",
		"UR 1",
		"DL 3",
		"D 3",
		"L 8",
		"R 16",
	}
	wants := []Position{
		{0, 1},
		{1, 1},
		{-3, -3},
		{-3, -6},
		{-12, -6},
		{4, -6},
	}
	for testIndex, want := range wants {
		assert.Equal(t, want, Move(positions[testIndex], moves[testIndex]))
	}
}

func TestStraightMoves(t *testing.T) {
	positions := [][]Position{
		{
			{0, 0},
			{0, 0},
		},
		{
			{0, 0},
			{-3, -3},
		},
		{
			{-4, -6},
			{-12, -6},
		},
		{
			{-4, 0},
			{-4, -6},
		},
	}
	wants := [][]string{
		nil,
		nil,
		{"L 1", "L 1", "L 1", "L 1", "L 1", "L 1", "L 1"},
		{"D 1", "D 1", "D 1", "D 1", "D 1"},
	}
	for testIndex, want := range wants {
		assert.Equal(t, want, StraightMoves(positions[testIndex][0], positions[testIndex][1]))
	}
}

func TestDiagMove(t *testing.T) {
	positions := [][]Position{
		{
			{0, 0},
			{0, 0},
		},
		{
			{0, 0},
			{-3, -3},
		},
		{
			{-4, -6},
			{-12, -6},
		},
		{
			{-4, 0},
			{-4, -6},
		},
		{
			{0, 0},
			{-6, 6},
		},
		{
			{-4, 0},
			{4, 7},
		},
		{
			{-4, 0},
			{9, -6},
		},
	}
	wants := []string{
		"X 0",
		"DL 1",
		"X 0",
		"X 0",
		"UL 1",
		"UR 1",
		"DR 1",
	}
	for testIndex, want := range wants {
		assert.Equal(t, want, DiagMove(positions[testIndex][0], positions[testIndex][1]))
	}
}

func TestFormatGrid(t *testing.T) {
	knots := [][]Position{
		{
			{0, 0},
			{0, 0},
		},
		{
			{0, 0},
			{-3, -3},
		},
		{
			{-4, -6},
			{-12, -6},
		},
		{
			{-4, 0},
			{-4, -6},
		},
		{
			{0, 0},
			{-6, 6},
		},
		{
			{-4, 0},
			{4, 7},
		},
		{
			{-4, 0},
			{9, -6},
		},
	}
	wants := []string{
		" 10  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   \n" +
			" 9   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   \n" +
			" 8   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   \n" +
			" 7   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   \n" +
			" 6   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   \n" +
			" 5   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   \n" +
			" 4   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   \n" +
			" 3   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   \n" +
			" 2   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   \n" +
			" 1   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   \n" +
			" 0   .   .   .   .   .   .   .   .   .   .   0   .   .   .   .   .   .   .   .   .   .   \n" +
			" -1  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   \n" +
			" -2  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   \n" +
			" -3  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   \n" +
			" -4  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   \n" +
			" -5  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   \n" +
			" -6  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   \n" +
			" -7  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   \n" +
			" -8  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   \n" +
			" -9  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   \n" +
			" -10 .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   \n" +
			"     -10 -9  -8  -7  -6  -5  -4  -3  -2  -1  0   1   2   3   4   5   6   7   8   9   10 ",
		" 10  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   \n 9   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   \n 8   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   \n 7   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   \n 6   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   \n 5   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   \n 4   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   \n 3   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   \n 2   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   \n 1   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   \n 0   .   .   .   .   .   .   .   .   .   .   H   .   .   .   .   .   .   .   .   .   .   \n -1  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   \n -2  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   \n -3  .   .   .   .   .   .   .   T   .   .   .   .   .   .   .   .   .   .   .   .   .   \n -4  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   \n -5  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   \n -6  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   \n -7  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   \n -8  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   \n -9  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   \n -10 .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   \n     -10 -9  -8  -7  -6  -5  -4  -3  -2  -1  0   1   2   3   4   5   6   7   8   9   10 ",
		" 10  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   \n 9   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   \n 8   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   \n 7   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   \n 6   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   \n 5   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   \n 4   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   \n 3   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   \n 2   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   \n 1   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   \n 0   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   \n -1  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   \n -2  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   \n -3  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   \n -4  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   \n -5  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   \n -6  .   .   .   .   .   .   H   .   .   .   .   .   .   .   .   .   .   .   .   .   .   \n -7  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   \n -8  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   \n -9  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   \n -10 .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   \n     -10 -9  -8  -7  -6  -5  -4  -3  -2  -1  0   1   2   3   4   5   6   7   8   9   10 ",
		" 10  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   \n 9   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   \n 8   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   \n 7   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   \n 6   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   \n 5   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   \n 4   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   \n 3   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   \n 2   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   \n 1   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   \n 0   .   .   .   .   .   .   H   .   .   .   .   .   .   .   .   .   .   .   .   .   .   \n -1  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   \n -2  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   \n -3  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   \n -4  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   \n -5  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   \n -6  .   .   .   .   .   .   T   .   .   .   .   .   .   .   .   .   .   .   .   .   .   \n -7  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   \n -8  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   \n -9  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   \n -10 .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   \n     -10 -9  -8  -7  -6  -5  -4  -3  -2  -1  0   1   2   3   4   5   6   7   8   9   10 ",
		" 10  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   \n 9   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   \n 8   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   \n 7   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   \n 6   .   .   .   .   T   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   \n 5   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   \n 4   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   \n 3   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   \n 2   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   \n 1   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   \n 0   .   .   .   .   .   .   .   .   .   .   H   .   .   .   .   .   .   .   .   .   .   \n -1  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   \n -2  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   \n -3  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   \n -4  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   \n -5  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   \n -6  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   \n -7  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   \n -8  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   \n -9  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   \n -10 .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   \n     -10 -9  -8  -7  -6  -5  -4  -3  -2  -1  0   1   2   3   4   5   6   7   8   9   10 ",
		" 10  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   \n 9   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   \n 8   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   \n 7   .   .   .   .   .   .   .   .   .   .   .   .   .   .   T   .   .   .   .   .   .   \n 6   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   \n 5   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   \n 4   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   \n 3   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   \n 2   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   \n 1   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   \n 0   .   .   .   .   .   .   H   .   .   .   .   .   .   .   .   .   .   .   .   .   .   \n -1  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   \n -2  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   \n -3  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   \n -4  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   \n -5  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   \n -6  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   \n -7  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   \n -8  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   \n -9  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   \n -10 .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   \n     -10 -9  -8  -7  -6  -5  -4  -3  -2  -1  0   1   2   3   4   5   6   7   8   9   10 ",
		" 10  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   \n 9   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   \n 8   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   \n 7   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   \n 6   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   \n 5   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   \n 4   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   \n 3   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   \n 2   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   \n 1   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   \n 0   .   .   .   .   .   .   H   .   .   .   .   .   .   .   .   .   .   .   .   .   .   \n -1  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   \n -2  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   \n -3  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   \n -4  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   \n -5  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   \n -6  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   T   .   \n -7  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   \n -8  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   \n -9  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   \n -10 .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   \n     -10 -9  -8  -7  -6  -5  -4  -3  -2  -1  0   1   2   3   4   5   6   7   8   9   10 ",
	}
	for testIndex, want := range wants {
		assert.Equal(t, want, FormatGrid(-10, -10, 10, 10, knots[testIndex], map[Position]int{}))
	}
}

func TestFormatGridVisited(t *testing.T) {
	visited := []map[Position]int{
		{{0, 0}: 1, {0, 1}: 3},
		{{0, 0}: 1, {0, 1}: 1, {0, 2}: 3, {2, 1}: 0},
	}
	wants := []string{
		" 2   .   .   .   .   .   \n 1   .   .   #   .   .   \n 0   .   .   #   .   .   \n -1  .   .   .   .   .   \n -2  .   .   .   .   .   \n     -2  -1  0   1   2  ",
		" 2   .   .   #   .   .   \n 1   .   .   #   .   .   \n 0   .   .   #   .   .   \n -1  .   .   .   .   .   \n -2  .   .   .   .   .   \n     -2  -1  0   1   2  ",
	}
	for testIndex, want := range wants {
		assert.Equal(t, want, FormatGridVisited(-2, -2, 2, 2, visited[testIndex]))
	}
}

func TestMin(t *testing.T) {
	inputs := [][]int{
		{0, 5},
		{0, -10},
		{-5, 5},
		{-5, -50},
		{10, 50},
	}
	wants := []int{
		0,
		-10,
		-5,
		-50,
		10,
	}
	for testIndex, want := range wants {
		assert.Equal(t, want, Min(inputs[testIndex][0], inputs[testIndex][1]))
	}
}

func TestMax(t *testing.T) {
	inputs := [][]int{
		{0, 5},
		{0, -10},
		{-5, 5},
		{-5, -50},
		{10, 50},
	}
	wants := []int{
		5,
		0,
		5,
		-5,
		50,
	}
	for testIndex, want := range wants {
		assert.Equal(t, want, Max(inputs[testIndex][0], inputs[testIndex][1]))
	}
}

func TestRecordTailPosition(t *testing.T) {
	positions := []Position{
		{0, 0},
		{0, 0},
		{5, 6},
	}
	visited := []map[Position]int{
		{{0, 0}: 1, {0, 1}: 3},
		{{0, 0}: 1, {0, 1}: 1, {0, 2}: 3, {2, 1}: 0},
		{{0, 0}: 1, {0, 1}: 1, {0, 2}: 3, {2, 1}: 0},
	}
	wants := []map[Position]int{
		{{0, 0}: 2, {0, 1}: 3},
		{{0, 0}: 2, {0, 1}: 1, {0, 2}: 3, {2, 1}: 0},
		{{0, 0}: 1, {0, 1}: 1, {0, 2}: 3, {2, 1}: 0, {5, 6}: 1},
	}
	for testIndex, want := range wants {
		assert.Equal(t, want, RecordTailPosition(positions[testIndex], visited[testIndex]))
	}
}
